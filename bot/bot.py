import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import os
import requests
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env –∏–ª–∏ –≤ env
BACKEND_URL = os.getenv('BACKEND_URL', 'http://localhost:8080/api')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Lifeline Bot.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /tasks ‚Äî —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏\n"
        "/events ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ —Å–æ–±—ã—Ç–∏—è—Ö –í–£–ó–∞"
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("tasks"))
async def show_tasks(message: Message):
    user_id = message.from_user.id
    response = requests.get(f"{BACKEND_URL}/tasks?telegram_id={user_id}")

    if response.status_code == 200:
        tasks = response.json()
        if not tasks:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        msg = "üìÖ –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
        for task in tasks:
            due_date = datetime.fromisoformat(task['due_date']).strftime('%d.%m %H:%M')
            msg += f"‚Ä¢ {task['title']} ‚Äî –¥–æ {due_date}\n"

        await message.answer(msg)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –í–£–ó–∞
@dp.message(Command("events"))
async def show_events(message: Message):
    user_id = message.from_user.id
    response = requests.get(f"{BACKEND_URL}/events?telegram_id={user_id}")

    if response.status_code == 200:
        events = response.json()
        if not events:
            await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return

        msg = "üìå –°–æ–±—ã—Ç–∏—è –í–£–ó–∞:\n"
        for event in events:
            date = datetime.fromisoformat(event['date']).strftime('%d.%m %H:%M')
            msg += f"‚Ä¢ {event['name']} ‚Äî {date} ‚Äî {event['location']}\n"

        await message.answer(msg)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π.")

# –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_deadline_reminders(bot: Bot):
    response = requests.get(f"{BACKEND_URL}/tasks/upcoming")
    if response.status_code != 200:
        return

    tasks = response.json()
    for task in tasks:
        user_id = task['user_id']
        message_text = f"‚è≥ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ó–∞–¥–∞—á–∞ '{task['title']}' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
        try:
            await bot.send_message(user_id, message_text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
